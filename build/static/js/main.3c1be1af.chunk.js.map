{"version":3,"sources":["StandardForm.js","FormikForm.js","FormikFieldForm.js","FormikMuiForm.js","FormPage.js","App.js","serviceWorker.js","index.js"],"names":["StandardForm","react_default","a","createElement","method","action","type","name","placeholder","FormikForm","formElement","useRef","InnerForm","withFormik","mapPropsToValues","handleSubmit","current","submit","_ref","onSubmit","ref","TextField","FormikFieldForm","formik_esm","FormikMuiForm","component","Frame","children","caption","style","border","padding","marginBottom","FormPage","Fragment","FormPage_Frame","src_StandardForm","src_FormikForm","src_FormikFieldForm","src_FormikMuiForm","App","src_FormPage","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3c1be1af.chunk.js","sourcesContent":["import React from 'react';\n\nconst StandardForm = () => (\n  <form method=\"POST\" action=\"/api/posttarget\">\n    <input type=\"text\" name=\"text\" placeholder=\"Enter info here\" />\n    <button type=\"submit\">Submit</button>\n  </form>\n);\n\nexport default StandardForm;\n","import React, { useRef } from 'react';\nimport { TextField } from '@material-ui/core';\nimport { withFormik } from 'formik';\n\n// using submit approach described here:\n// https://github.com/jaredpalmer/formik/issues/556\n\nconst FormikForm = () => {\n  const formElement = useRef(null);\n\n  const InnerForm = withFormik({\n    mapPropsToValues: () => ({}),\n    handleSubmit: () => {\n      formElement.current.submit();\n    }\n  })(({ handleSubmit }) => (\n    <form\n      method=\"POST\"\n      action=\"/api/posttarget\"\n      onSubmit={handleSubmit}\n      ref={formElement}\n    >\n      <TextField type=\"text\" name=\"text\" placeholder=\"Enter info here\" />\n      <button type=\"submit\">Submit</button>\n    </form>\n  ));\n\n  return <InnerForm />;\n};\n\nexport default FormikForm;\n","import React, { useRef } from 'react';\nimport { Field, withFormik } from 'formik';\n\n// using submit approach described here:\n// https://github.com/jaredpalmer/formik/issues/556\n\nconst FormikFieldForm = () => {\n  const formElement = useRef(null);\n\n  const InnerForm = withFormik({\n    mapPropsToValues: () => ({}),\n    handleSubmit: () => {\n      formElement.current.submit();\n    }\n  })(({ handleSubmit }) => (\n    <form\n      method=\"POST\"\n      action=\"/api/posttarget\"\n      onSubmit={handleSubmit}\n      ref={formElement}\n    >\n      <Field type=\"text\" name=\"text\" placeholder=\"Enter info here\" />\n      <button type=\"submit\">Submit</button>\n    </form>\n  ));\n\n  return <InnerForm />;\n};\n\nexport default FormikFieldForm;\n","import React, { useRef } from 'react';\n//import { TextField } from '@material-ui/core';\nimport { Field, withFormik } from 'formik';\nimport { TextField } from 'formik-material-ui';\n\n// using submit approach described here:\n// https://github.com/jaredpalmer/formik/issues/556\n\nconst FormikMuiForm = () => {\n  const formElement = useRef(null);\n\n  const InnerForm = withFormik({\n    mapPropsToValues: () => ({}),\n    handleSubmit: () => {\n      formElement.current.submit();\n    }\n  })(({ handleSubmit }) => (\n    <form\n      method=\"POST\"\n      action=\"/api/posttarget\"\n      onSubmit={handleSubmit}\n      ref={formElement}\n    >\n      <Field\n        type=\"text\"\n        name=\"text\"\n        placeholder=\"Enter info here\"\n        component={TextField}\n      />\n      <button type=\"submit\">Submit</button>\n    </form>\n  ));\n\n  return <InnerForm />;\n};\n\nexport default FormikMuiForm;\n","import React from 'react';\nimport StandardForm from './StandardForm';\nimport FormikForm from './FormikForm';\nimport FormikFieldForm from './FormikFieldForm';\nimport FormikMuiForm from './FormikMuiForm';\n\nconst Frame = ({ children, caption }) => (\n  <div\n    style={{ border: '1px solid grey', padding: '20px', marginBottom: '20px' }}\n  >\n    <h3>{caption}</h3>\n    {children}\n  </div>\n);\n\nconst FormPage = () => (\n  <>\n    <Frame caption=\"Standard Form\">\n      <StandardForm />\n    </Frame>\n    <Frame caption=\"Formik Form with MUI TextField\">\n      <FormikForm />\n    </Frame>\n    <Frame caption=\"Formik Form with Formik Field\">\n      <FormikFieldForm />\n    </Frame>\n    <Frame caption=\"Formik Form with formik-material-ui TextField\">\n      <FormikMuiForm />\n    </Frame>\n  </>\n);\n\nexport default FormPage;\n","import React from 'react';\nimport './App.css';\nimport FormPage from './FormPage';\n\nfunction App() {\n  return <FormPage />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}